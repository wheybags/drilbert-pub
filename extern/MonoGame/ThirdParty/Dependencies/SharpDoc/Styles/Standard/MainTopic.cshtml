@*
// Copyright (c) 2010-2013 SharpDoc - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.       
// -------------------------------------------------------------------------------
// Override this to modify the sequence of the generated file for this template
// -------------------------------------------------------------------------------
*@
@using SharpDoc.Model
@using System.Text;
@using SharpDoc.Logging;
@model SharpDoc.TemplateContext
@functions {
    /// <summary>
    /// Write all topics and sub topics
    /// </summary>
    /// <param name="topics"></param>
    public void WriteTopic(NTopic topic)
    {
        Model.Topic = topic;
        var templateName = topic.IsClassLibrary ? "Library" : topic.IsSearchResult ? "Search" : "Topic";
        var parentTopics = topic.GetParents();
        bool isInClassLibrary = false;
        foreach (var parentTopic in parentTopics)
        {
            if (parentTopic.IsClassLibrary)
            {
                isInClassLibrary = true;
                break;
            }
        }

        // If in class library, don't generate topics yet
        if (isInClassLibrary && !topic.IsSearchResult)
            return;

        // Topics that are not available for a particular style are removed from TOC
        if (topic.Excludes.Contains(Model.CurrentStyleName))
            return;        

        // If this is the main class library, change me name            
        if (topic.IsClassLibrary)
        {
            topic.Name = Param.ClassLibraryName ?? topic.Name;
            topic.FullName = topic.FullName ?? topic.Name;
        }

        Logger.Message("Generating documentation for topic [{0}] from", topic.Name, topic.FileName != null ? string.Format("File [{0}]", topic.FileName) : string.Format("WebDoc [{0}]", topic.WebDoc));
        Model.WriteTo(topic, Parse(templateName));

        foreach (var subTopic in topic.SubTopics)
            WriteTopic(subTopic);
    }
}
@{ 
    // Write all topics
    WriteTopic(Model.RootTopic);
    
    // Reset current topic to null
    Model.Topic = null;        
}