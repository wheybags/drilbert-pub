@*
// Copyright (c) 2010-2013 SharpDoc - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.       
// -------------------------------------------------------------------------------
// Override this template to modify the body inside an html page
// -------------------------------------------------------------------------------
*@
@model SharpDoc.TemplateContext
@using SharpDoc.Model
@using System.Text
@functions {
    public void DisplayTopic(StringBuilder toc, NTopic topic, int level, bool isHighlight = false) {
        // Don't list the search topic unless its selected
        if (topic.IsSearchResult && Model.Topic.Id != topic.Id)
        {
            return;
        }

        // Topics that are not available for a particular style are removed from TOC
        if (topic.Excludes.Contains(Model.CurrentStyleName))
        {
            return;
        }

        var topicLink = topic;
        var url = Model.ToUrl(topicLink, null, false, isHighlight ? " class='highlight'" : "");
        string className = (topic.SubTopics.Count > 0) ?  "composed" : "terminal";
        string isOpen = (level > 0) ? " closed" : " opened"; 

        toc.AppendFormat("<div id='{0}_toc' class='{1}{2}' style='padding-left: {3}em' onclick='toggleToc(\"{0}\")'><div class='icon'></div>{4}<div style='clear: both'></div></div>", topic.PageId, className, isOpen, level, url).AppendLine();
    }

     public void AddTopicToToc(StringBuilder toc, NTopic topic, int level) {
        DisplayTopic(toc, topic, level);
        int nbSubTopics = topic.SubTopics.Count;

        if( nbSubTopics > 0)
        {
            string visibility = (level >0) ? "hidden" : "visible";
            var subTopics = topic.SubTopics;

            toc.AppendFormat("<div id='{0}_SubTopics' class='{1}'>", topic.PageId, visibility).AppendLine();
            for(var i = 0; i < topic.SubTopics.Count; i++)
            {
                AddTopicToToc(toc, subTopics[i], level +1);
            }
            toc.Append("</div>").AppendLine();
        }
    }

    public string DumpToc() {

        var toc = new StringBuilder();
        var rootTopic = Model.RootTopic;
        Model.Topic = rootTopic;

        AddTopicToToc(toc, rootTopic, 0);
        return toc.ToString();        
    }
}

@helper Dump()
{
    if (Param.UseSearchBox)
    {
        @Include("SearchBox")
    }
    @Raw(DumpToc())
}