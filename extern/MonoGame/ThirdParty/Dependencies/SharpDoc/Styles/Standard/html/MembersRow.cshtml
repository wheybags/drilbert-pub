@*
// Copyright (c) 2010-2013 SharpDoc - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.       
// -------------------------------------------------------------------------------
// Override this template to modify the global behavior for each Dump functions
// -------------------------------------------------------------------------------
*@
@model SharpDoc.TemplateContext
@using SharpDoc.Model
@Import("Icons")

@*// Dumps members*@
@helper Prepare(IEnumerable<NModelBase> members, dynamic rowContext)
{
	rowContext.DisplayUnmanagedColumn = false;
	foreach (var member in members)
	{
		if (!string.IsNullOrEmpty(member.UnManagedShortApi))
        {
            rowContext.DisplayUnmanagedColumn = true;
            break;
        }
	}
}	

@helper DumpHeader(bool showIcons, dynamic rowContext)
{
	if (showIcons) {
		<th class="icon-col">&nbsp;</th>
	}
	<th class="platicon-col">Platforms</th>
    <th class="name-col">Name</th>
	if (rowContext.DisplayUnmanagedColumn)
    {
         <th class="name-col">Unmanaged</th>
    }
    <th class="desc-col">Description</th>
}

@helper DumpRow(NModelBase member, bool showIcons, string displayName, string postDesc, dynamic rowContext)
{
    if (showIcons) {
        <td class="icon-col">@Helpers.Icons.GetIcons(member)</td>
    }
    <td class="platicon-col">@Helpers.Icons.GetPlatformIcons(member)</td>

    if(Model.CurrentContext is NEnum) {
        <td class="name-col"><a href="#">@member.Name</a></td>
    } else {
        <td class="name-col">@Raw(ToUrl(member, displayName, true))</td>
    }
	if (rowContext.DisplayUnmanagedColumn) {
         <td class="unman-col"><a target="_blank" href="http://msdn.microsoft.com/en-us/library/@(member.MsdnId).aspx">@member.UnManagedShortApi</a></td>
    }
    <td class="desc-col">@Raw(TagExpand(member.Description))&nbsp;@Raw(postDesc)</td>
}




